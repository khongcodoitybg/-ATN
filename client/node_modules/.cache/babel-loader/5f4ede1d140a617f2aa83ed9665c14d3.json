{"ast":null,"code":"// randomColor by David Merfield under the CC0 license\n// https://github.com/davidmerfield/randomColor/\n\n;\n(function (root, factory) {\n  // Support CommonJS\n  if (typeof exports === 'object') {\n    var randomColor = factory();\n\n    // Support NodeJS & Component, which allow module.exports to be a function\n    if (typeof module === 'object' && module && module.exports) {\n      exports = module.exports = randomColor;\n    }\n\n    // Support CommonJS 1.1.1 spec\n    exports.randomColor = randomColor;\n\n    // Support AMD\n  } else if (typeof define === 'function' && define.amd) {\n    define([], factory);\n\n    // Support vanilla script loading\n  } else {\n    root.randomColor = factory();\n  }\n})(this, function () {\n  // Seed to get repeatable colors\n  var seed = null;\n\n  // Shared color dictionary\n  var colorDictionary = {};\n\n  // Populate the color dictionary\n  loadColorBounds();\n\n  // check if a range is taken\n  var colorRanges = [];\n  var randomColor = function randomColor(options) {\n    options = options || {};\n\n    // Check if there is a seed and ensure it's an\n    // integer. Otherwise, reset the seed value.\n    if (options.seed !== undefined && options.seed !== null && options.seed === parseInt(options.seed, 10)) {\n      seed = options.seed;\n\n      // A string was passed as a seed\n    } else if (typeof options.seed === 'string') {\n      seed = stringToInteger(options.seed);\n\n      // Something was passed as a seed but it wasn't an integer or string\n    } else if (options.seed !== undefined && options.seed !== null) {\n      throw new TypeError('The seed value must be an integer or string');\n\n      // No seed, reset the value outside.\n    } else {\n      seed = null;\n    }\n    var H, S, B;\n\n    // Check if we need to generate multiple colors\n    if (options.count !== null && options.count !== undefined) {\n      var totalColors = options.count,\n        colors = [];\n      // Value false at index i means the range i is not taken yet.\n      for (var i = 0; i < options.count; i++) {\n        colorRanges.push(false);\n      }\n      options.count = null;\n      while (totalColors > colors.length) {\n        var color = randomColor(options);\n        if (seed !== null) {\n          options.seed = seed;\n        }\n        colors.push(color);\n      }\n      options.count = totalColors;\n      return colors;\n    }\n\n    // First we pick a hue (H)\n    H = pickHue(options);\n\n    // Then use H to determine saturation (S)\n    S = pickSaturation(H, options);\n\n    // Then use S and H to determine brightness (B).\n    B = pickBrightness(H, S, options);\n\n    // Then we return the HSB color in the desired format\n    return setFormat([H, S, B], options);\n  };\n  function pickHue(options) {\n    if (colorRanges.length > 0) {\n      var hueRange = getRealHueRange(options.hue);\n      var hue = randomWithin(hueRange);\n\n      //Each of colorRanges.length ranges has a length equal approximatelly one step\n      var step = (hueRange[1] - hueRange[0]) / colorRanges.length;\n      var j = parseInt((hue - hueRange[0]) / step);\n\n      //Check if the range j is taken\n      if (colorRanges[j] === true) {\n        j = (j + 2) % colorRanges.length;\n      } else {\n        colorRanges[j] = true;\n      }\n      var min = (hueRange[0] + j * step) % 359,\n        max = (hueRange[0] + (j + 1) * step) % 359;\n      hueRange = [min, max];\n      hue = randomWithin(hueRange);\n      if (hue < 0) {\n        hue = 360 + hue;\n      }\n      return hue;\n    } else {\n      var hueRange = getHueRange(options.hue);\n      hue = randomWithin(hueRange);\n      // Instead of storing red as two seperate ranges,\n      // we group them, using negative numbers\n      if (hue < 0) {\n        hue = 360 + hue;\n      }\n      return hue;\n    }\n  }\n  function pickSaturation(hue, options) {\n    if (options.hue === 'monochrome') {\n      return 0;\n    }\n    if (options.luminosity === 'random') {\n      return randomWithin([0, 100]);\n    }\n    var saturationRange = getSaturationRange(hue);\n    var sMin = saturationRange[0],\n      sMax = saturationRange[1];\n    switch (options.luminosity) {\n      case 'bright':\n        sMin = 55;\n        break;\n      case 'dark':\n        sMin = sMax - 10;\n        break;\n      case 'light':\n        sMax = 55;\n        break;\n    }\n    return randomWithin([sMin, sMax]);\n  }\n  function pickBrightness(H, S, options) {\n    var bMin = getMinimumBrightness(H, S),\n      bMax = 100;\n    switch (options.luminosity) {\n      case 'dark':\n        bMax = bMin + 20;\n        break;\n      case 'light':\n        bMin = (bMax + bMin) / 2;\n        break;\n      case 'random':\n        bMin = 0;\n        bMax = 100;\n        break;\n    }\n    return randomWithin([bMin, bMax]);\n  }\n  function setFormat(hsv, options) {\n    switch (options.format) {\n      case 'hsvArray':\n        return hsv;\n      case 'hslArray':\n        return HSVtoHSL(hsv);\n      case 'hsl':\n        var hsl = HSVtoHSL(hsv);\n        return 'hsl(' + hsl[0] + ', ' + hsl[1] + '%, ' + hsl[2] + '%)';\n      case 'hsla':\n        var hslColor = HSVtoHSL(hsv);\n        var alpha = options.alpha || Math.random();\n        return 'hsla(' + hslColor[0] + ', ' + hslColor[1] + '%, ' + hslColor[2] + '%, ' + alpha + ')';\n      case 'rgbArray':\n        return HSVtoRGB(hsv);\n      case 'rgb':\n        var rgb = HSVtoRGB(hsv);\n        return 'rgb(' + rgb.join(', ') + ')';\n      case 'rgba':\n        var rgbColor = HSVtoRGB(hsv);\n        var alpha = options.alpha || Math.random();\n        return 'rgba(' + rgbColor.join(', ') + ', ' + alpha + ')';\n      default:\n        return HSVtoHex(hsv);\n    }\n  }\n  function getMinimumBrightness(H, S) {\n    var lowerBounds = getColorInfo(H).lowerBounds;\n    for (var i = 0; i < lowerBounds.length - 1; i++) {\n      var s1 = lowerBounds[i][0],\n        v1 = lowerBounds[i][1];\n      var s2 = lowerBounds[i + 1][0],\n        v2 = lowerBounds[i + 1][1];\n      if (S >= s1 && S <= s2) {\n        var m = (v2 - v1) / (s2 - s1),\n          b = v1 - m * s1;\n        return m * S + b;\n      }\n    }\n    return 0;\n  }\n  function getHueRange(colorInput) {\n    if (typeof parseInt(colorInput) === 'number') {\n      var number = parseInt(colorInput);\n      if (number < 360 && number > 0) {\n        return [number, number];\n      }\n    }\n    if (typeof colorInput === 'string') {\n      if (colorDictionary[colorInput]) {\n        var color = colorDictionary[colorInput];\n        if (color.hueRange) {\n          return color.hueRange;\n        }\n      } else if (colorInput.match(/^#?([0-9A-F]{3}|[0-9A-F]{6})$/i)) {\n        var hue = HexToHSB(colorInput)[0];\n        return [hue, hue];\n      }\n    }\n    return [0, 360];\n  }\n  function getSaturationRange(hue) {\n    return getColorInfo(hue).saturationRange;\n  }\n  function getColorInfo(hue) {\n    // Maps red colors to make picking hue easier\n    if (hue >= 334 && hue <= 360) {\n      hue -= 360;\n    }\n    for (var colorName in colorDictionary) {\n      var color = colorDictionary[colorName];\n      if (color.hueRange && hue >= color.hueRange[0] && hue <= color.hueRange[1]) {\n        return colorDictionary[colorName];\n      }\n    }\n    return 'Color not found';\n  }\n  function randomWithin(range) {\n    if (seed === null) {\n      //generate random evenly destinct number from : https://martin.ankerl.com/2009/12/09/how-to-create-random-colors-programmatically/\n      var golden_ratio = 0.618033988749895;\n      var r = Math.random();\n      r += golden_ratio;\n      r %= 1;\n      return Math.floor(range[0] + r * (range[1] + 1 - range[0]));\n    } else {\n      //Seeded random algorithm from http://indiegamr.com/generate-repeatable-random-numbers-in-js/\n      var max = range[1] || 1;\n      var min = range[0] || 0;\n      seed = (seed * 9301 + 49297) % 233280;\n      var rnd = seed / 233280.0;\n      return Math.floor(min + rnd * (max - min));\n    }\n  }\n  function HSVtoHex(hsv) {\n    var rgb = HSVtoRGB(hsv);\n    function componentToHex(c) {\n      var hex = c.toString(16);\n      return hex.length == 1 ? '0' + hex : hex;\n    }\n    var hex = '#' + componentToHex(rgb[0]) + componentToHex(rgb[1]) + componentToHex(rgb[2]);\n    return hex;\n  }\n  function defineColor(name, hueRange, lowerBounds) {\n    var sMin = lowerBounds[0][0],\n      sMax = lowerBounds[lowerBounds.length - 1][0],\n      bMin = lowerBounds[lowerBounds.length - 1][1],\n      bMax = lowerBounds[0][1];\n    colorDictionary[name] = {\n      hueRange: hueRange,\n      lowerBounds: lowerBounds,\n      saturationRange: [sMin, sMax],\n      brightnessRange: [bMin, bMax]\n    };\n  }\n  function loadColorBounds() {\n    defineColor('monochrome', null, [[0, 0], [100, 0]]);\n    defineColor('red', [-26, 18], [[20, 100], [30, 92], [40, 89], [50, 85], [60, 78], [70, 70], [80, 60], [90, 55], [100, 50]]);\n    defineColor('orange', [18, 46], [[20, 100], [30, 93], [40, 88], [50, 86], [60, 85], [70, 70], [100, 70]]);\n    defineColor('yellow', [46, 62], [[25, 100], [40, 94], [50, 89], [60, 86], [70, 84], [80, 82], [90, 80], [100, 75]]);\n    defineColor('green', [62, 178], [[30, 100], [40, 90], [50, 85], [60, 81], [70, 74], [80, 64], [90, 50], [100, 40]]);\n    defineColor('blue', [178, 257], [[20, 100], [30, 86], [40, 80], [50, 74], [60, 60], [70, 52], [80, 44], [90, 39], [100, 35]]);\n    defineColor('purple', [257, 282], [[20, 100], [30, 87], [40, 79], [50, 70], [60, 65], [70, 59], [80, 52], [90, 45], [100, 42]]);\n    defineColor('pink', [282, 334], [[20, 100], [30, 90], [40, 86], [60, 84], [80, 80], [90, 75], [100, 73]]);\n  }\n  function HSVtoRGB(hsv) {\n    // this doesn't work for the values of 0 and 360\n    // here's the hacky fix\n    var h = hsv[0];\n    if (h === 0) {\n      h = 1;\n    }\n    if (h === 360) {\n      h = 359;\n    }\n\n    // Rebase the h,s,v values\n    h = h / 360;\n    var s = hsv[1] / 100,\n      v = hsv[2] / 100;\n    var h_i = Math.floor(h * 6),\n      f = h * 6 - h_i,\n      p = v * (1 - s),\n      q = v * (1 - f * s),\n      t = v * (1 - (1 - f) * s),\n      r = 256,\n      g = 256,\n      b = 256;\n    switch (h_i) {\n      case 0:\n        r = v;\n        g = t;\n        b = p;\n        break;\n      case 1:\n        r = q;\n        g = v;\n        b = p;\n        break;\n      case 2:\n        r = p;\n        g = v;\n        b = t;\n        break;\n      case 3:\n        r = p;\n        g = q;\n        b = v;\n        break;\n      case 4:\n        r = t;\n        g = p;\n        b = v;\n        break;\n      case 5:\n        r = v;\n        g = p;\n        b = q;\n        break;\n    }\n    var result = [Math.floor(r * 255), Math.floor(g * 255), Math.floor(b * 255)];\n    return result;\n  }\n  function HexToHSB(hex) {\n    hex = hex.replace(/^#/, '');\n    hex = hex.length === 3 ? hex.replace(/(.)/g, '$1$1') : hex;\n    var red = parseInt(hex.substr(0, 2), 16) / 255,\n      green = parseInt(hex.substr(2, 2), 16) / 255,\n      blue = parseInt(hex.substr(4, 2), 16) / 255;\n    var cMax = Math.max(red, green, blue),\n      delta = cMax - Math.min(red, green, blue),\n      saturation = cMax ? delta / cMax : 0;\n    switch (cMax) {\n      case red:\n        return [60 * ((green - blue) / delta % 6) || 0, saturation, cMax];\n      case green:\n        return [60 * ((blue - red) / delta + 2) || 0, saturation, cMax];\n      case blue:\n        return [60 * ((red - green) / delta + 4) || 0, saturation, cMax];\n    }\n  }\n  function HSVtoHSL(hsv) {\n    var h = hsv[0],\n      s = hsv[1] / 100,\n      v = hsv[2] / 100,\n      k = (2 - s) * v;\n    return [h, Math.round(s * v / (k < 1 ? k : 2 - k) * 10000) / 100, k / 2 * 100];\n  }\n  function stringToInteger(string) {\n    var total = 0;\n    for (var i = 0; i !== string.length; i++) {\n      if (total >= Number.MAX_SAFE_INTEGER) break;\n      total += string.charCodeAt(i);\n    }\n    return total;\n  }\n\n  // get The range of given hue when options.count!=0\n  function getRealHueRange(colorHue) {\n    if (!isNaN(colorHue)) {\n      var number = parseInt(colorHue);\n      if (number < 360 && number > 0) {\n        return getColorInfo(colorHue).hueRange;\n      }\n    } else if (typeof colorHue === 'string') {\n      if (colorDictionary[colorHue]) {\n        var color = colorDictionary[colorHue];\n        if (color.hueRange) {\n          return color.hueRange;\n        }\n      } else if (colorHue.match(/^#?([0-9A-F]{3}|[0-9A-F]{6})$/i)) {\n        var hue = HexToHSB(colorHue)[0];\n        return getColorInfo(hue).hueRange;\n      }\n    }\n    return [0, 360];\n  }\n  return randomColor;\n});","map":null,"metadata":{},"sourceType":"script"}