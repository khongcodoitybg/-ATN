{"ast":null,"code":"import _classCallCheck from \"D:\\\\WorkSpace\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\WorkSpace\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"D:\\\\WorkSpace\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"D:\\\\WorkSpace\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"D:\\\\WorkSpace\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"D:\\\\WorkSpace\\\\client\\\\src\\\\app\\\\EgretLayout\\\\EgretLayout.jsx\";\nimport React, { Component } from 'react';\nimport { EgretLayouts } from './index';\nimport { PropTypes } from 'prop-types';\nimport { withRouter } from 'react-router-dom';\nimport { matchRoutes } from 'react-router-config';\nimport { connect } from 'react-redux';\nimport AppContext from 'app/appContext';\nimport localStorageService from '../services/localStorageService';\nimport ConstantList from '../appConfig';\nimport history from 'history.js';\nimport { setLayoutSettings, setDefaultSettings } from 'app/redux/actions/LayoutActions';\nimport { isEqual, merge } from 'lodash';\nimport { isMdScreen, getQueryParam } from 'utils';\nvar EgretLayout = /*#__PURE__*/function (_Component) {\n  _inherits(EgretLayout, _Component);\n  function EgretLayout(props, context) {\n    var _this;\n    _classCallCheck(this, EgretLayout);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(EgretLayout).call(this, props));\n    _this.setLayoutFromQuery = function () {\n      try {\n        var settingsFromQuery = getQueryParam('settings');\n        settingsFromQuery = settingsFromQuery ? JSON.parse(settingsFromQuery) : {};\n        var _this$props = _this.props,\n          settings = _this$props.settings,\n          _setLayoutSettings = _this$props.setLayoutSettings,\n          _setDefaultSettings = _this$props.setDefaultSettings;\n        var updatedSettings = merge({}, settings, settingsFromQuery);\n        _setLayoutSettings(updatedSettings);\n        _setDefaultSettings(updatedSettings);\n      } catch (e) {\n        // console.log(\"Error! Set settings from query param\", e);\n      }\n    };\n    _this.listenWindowResize = function () {\n      var _this$props2 = _this.props,\n        settings = _this$props2.settings,\n        setLayoutSettings = _this$props2.setLayoutSettings;\n      if (settings.layout1Settings.leftSidebar.show) {\n        var mode = isMdScreen() ? 'close' : 'full';\n        setLayoutSettings(merge({}, settings, {\n          layout1Settings: {\n            leftSidebar: {\n              mode: mode\n            }\n          }\n        }));\n      }\n    };\n    _this.appContext = context;\n    _this.updateSettingsFromRouter();\n\n    // Set settings from query (Only for demo purpose)\n    _this.setLayoutFromQuery();\n    return _this;\n  }\n  _createClass(EgretLayout, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (this.props.location.pathname !== prevProps.location.pathname) {\n        this.updateSettingsFromRouter();\n      }\n    }\n  }, {\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      if (window) {\n        // LISTEN WINDOW RESIZE\n        window.addEventListener('resize', this.listenWindowResize);\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (window) {\n        window.removeEventListener('resize', this.listenWindowResize);\n      }\n    }\n  }, {\n    key: \"updateSettingsFromRouter\",\n    value: function updateSettingsFromRouter() {\n      var routes = this.appContext.routes;\n      var matched = matchRoutes(routes, this.props.location.pathname)[0];\n      var _this$props3 = this.props,\n        defaultSettings = _this$props3.defaultSettings,\n        settings = _this$props3.settings,\n        setLayoutSettings = _this$props3.setLayoutSettings;\n      if (matched && matched.route.settings) {\n        // ROUTE HAS SETTINGS\n        var updatedSettings = merge({}, settings, matched.route.settings);\n        if (!isEqual(settings, updatedSettings)) {\n          setLayoutSettings(updatedSettings);\n          // console.log('Route has settings');\n        }\n      } else if (!isEqual(settings, defaultSettings)) {\n        setLayoutSettings(defaultSettings);\n        // console.log('reset settings', defaultSettings);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var expire_time = localStorageService.getSessionItem('token_expire_time');\n      if (expire_time != null) {\n        var dateObj = new Date(expire_time);\n        var isExpired = false;\n        if (dateObj != null) {\n          if (dateObj < Date.now()) {\n            isExpired = true;\n            localStorageService.removeItem('token_expire_time');\n            history.push(ConstantList.LOGIN_PAGE);\n          }\n        }\n      }\n      var settings = this.props.settings;\n      var Layout = EgretLayouts[settings.activeLayout];\n      return /*#__PURE__*/React.createElement(Layout, Object.assign({}, this.props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 10\n        }\n      }));\n    }\n  }]);\n  return EgretLayout;\n}(Component);\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    setLayoutSettings: PropTypes.func.isRequired,\n    setDefaultSettings: PropTypes.func.isRequired,\n    settings: state.layout.settings,\n    defaultSettings: state.layout.defaultSettings\n  };\n};\nEgretLayout.contextType = AppContext;\nexport default withRouter(connect(mapStateToProps, {\n  setLayoutSettings: setLayoutSettings,\n  setDefaultSettings: setDefaultSettings\n})(EgretLayout));","map":{"version":3,"names":["React","Component","EgretLayouts","PropTypes","withRouter","matchRoutes","connect","AppContext","localStorageService","ConstantList","history","setLayoutSettings","setDefaultSettings","isEqual","merge","isMdScreen","getQueryParam","EgretLayout","props","context","setLayoutFromQuery","settingsFromQuery","JSON","parse","settings","updatedSettings","e","listenWindowResize","layout1Settings","leftSidebar","show","mode","appContext","updateSettingsFromRouter","prevProps","location","pathname","window","addEventListener","removeEventListener","routes","matched","defaultSettings","route","expire_time","getSessionItem","dateObj","Date","isExpired","now","removeItem","push","LOGIN_PAGE","Layout","activeLayout","mapStateToProps","state","func","isRequired","layout","contextType"],"sources":["D:/WorkSpace/client/src/app/EgretLayout/EgretLayout.jsx"],"sourcesContent":["import React, { Component } from 'react';\nimport { EgretLayouts } from './index';\nimport { PropTypes } from 'prop-types';\nimport { withRouter } from 'react-router-dom';\nimport { matchRoutes } from 'react-router-config';\nimport { connect } from 'react-redux';\nimport AppContext from 'app/appContext';\nimport localStorageService from '../services/localStorageService';\nimport ConstantList from '../appConfig';\nimport history from 'history.js';\nimport {\n\tsetLayoutSettings,\n\tsetDefaultSettings,\n} from 'app/redux/actions/LayoutActions';\nimport { isEqual, merge } from 'lodash';\nimport { isMdScreen, getQueryParam } from 'utils';\n\nclass EgretLayout extends Component {\n\tconstructor(props, context) {\n\t\tsuper(props);\n\t\tthis.appContext = context;\n\t\tthis.updateSettingsFromRouter();\n\n\t\t// Set settings from query (Only for demo purpose)\n\t\tthis.setLayoutFromQuery();\n\t}\n\n\tcomponentDidUpdate(prevProps) {\n\t\tif (this.props.location.pathname !== prevProps.location.pathname) {\n\t\t\tthis.updateSettingsFromRouter();\n\t\t}\n\t}\n\n\tcomponentWillMount() {\n\t\tif (window) {\n\t\t\t// LISTEN WINDOW RESIZE\n\t\t\twindow.addEventListener('resize', this.listenWindowResize);\n\t\t}\n\t}\n\n\tcomponentWillUnmount() {\n\t\tif (window) {\n\t\t\twindow.removeEventListener('resize', this.listenWindowResize);\n\t\t}\n\t}\n\n\tsetLayoutFromQuery = () => {\n\t\ttry {\n\t\t\tlet settingsFromQuery = getQueryParam('settings');\n\t\t\tsettingsFromQuery = settingsFromQuery\n\t\t\t\t? JSON.parse(settingsFromQuery)\n\t\t\t\t: {};\n\t\t\tlet { settings, setLayoutSettings, setDefaultSettings } = this.props;\n\t\t\tlet updatedSettings = merge({}, settings, settingsFromQuery);\n\n\t\t\tsetLayoutSettings(updatedSettings);\n\t\t\tsetDefaultSettings(updatedSettings);\n\t\t} catch (e) {\n\t\t\t// console.log(\"Error! Set settings from query param\", e);\n\t\t}\n\t};\n\n\tlistenWindowResize = () => {\n\t\tlet { settings, setLayoutSettings } = this.props;\n\n\t\tif (settings.layout1Settings.leftSidebar.show) {\n\t\t\tlet mode = isMdScreen() ? 'close' : 'full';\n\t\t\tsetLayoutSettings(\n\t\t\t\tmerge({}, settings, { layout1Settings: { leftSidebar: { mode } } })\n\t\t\t);\n\t\t}\n\t};\n\n\tupdateSettingsFromRouter() {\n\t\tconst { routes } = this.appContext;\n\t\tconst matched = matchRoutes(routes, this.props.location.pathname)[0];\n\t\tlet { defaultSettings, settings, setLayoutSettings } = this.props;\n\n\t\tif (matched && matched.route.settings) {\n\t\t\t// ROUTE HAS SETTINGS\n\t\t\tconst updatedSettings = merge({}, settings, matched.route.settings);\n\t\t\tif (!isEqual(settings, updatedSettings)) {\n\t\t\t\tsetLayoutSettings(updatedSettings);\n\t\t\t\t// console.log('Route has settings');\n\t\t\t}\n\t\t} else if (!isEqual(settings, defaultSettings)) {\n\t\t\tsetLayoutSettings(defaultSettings);\n\t\t\t// console.log('reset settings', defaultSettings);\n\t\t}\n\t}\n\n\trender() {\n\t\tlet expire_time = localStorageService.getSessionItem('token_expire_time');\n\t\tif (expire_time != null) {\n\t\t\tlet dateObj = new Date(expire_time);\n\t\t\tvar isExpired = false;\n\t\t\tif (dateObj != null) {\n\t\t\t\tif (dateObj < Date.now()) {\n\t\t\t\t\tisExpired = true;\n\t\t\t\t\tlocalStorageService.removeItem('token_expire_time');\n\t\t\t\t\thistory.push(ConstantList.LOGIN_PAGE);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst { settings } = this.props;\n\t\tconst Layout = EgretLayouts[settings.activeLayout];\n\t\treturn <Layout {...this.props} />;\n\t}\n}\n\nconst mapStateToProps = (state) => ({\n\tsetLayoutSettings: PropTypes.func.isRequired,\n\tsetDefaultSettings: PropTypes.func.isRequired,\n\tsettings: state.layout.settings,\n\tdefaultSettings: state.layout.defaultSettings,\n});\n\nEgretLayout.contextType = AppContext;\n\nexport default withRouter(\n\tconnect(mapStateToProps, { setLayoutSettings, setDefaultSettings })(\n\t\tEgretLayout\n\t)\n);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}